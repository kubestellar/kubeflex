---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: update-cm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - update
  - create # to remove
  - patch
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k3s-certs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: k3s-certs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: update-cm
subjects:
- kind: ServiceAccount
  name: k3s-certs
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: k3s-certs
data:
  etcd-peer-ca.crt: ""
  etcd-peer-ca.key: ""
  etcd-peer-ca.pem: ""
  etcd-server-ca.crt: ""
  etcd-server-ca.key: ""
  etcd-server-ca.pem: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k3s-scripts
data:
  gen-certs.sh: |
    set -e
    apk add --no-cache jq curl base64 openssl

    APISERVER=https://kubernetes.default.svc
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
    NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt
    # curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/${NAMESPACE}/configmaps

    mkdir -p /var/lib/rancher/k3s/server/tls
    curl -sL https://raw.githubusercontent.com/k3s-io/k3s/refs/tags/v1.30.13%2Bk3s1/contrib/util/generate-custom-ca-certs.sh | bash -
    # Build configmap data
    echo "building json payload"

    data_value_string="{\"data\":{"
    while read -r f;
    do
      data_value_string+="\"$(basename $f)\": \"$(base64 $f)\","
      echo "filename=$f"
    done < <(find /var/lib/rancher/k3s/server/tls -type f -maxdepth 1)
    while read -r f;
    do
      data_value_string+="\"etcd-$(basename $f)\": \"$(base64 $f)\","
      echo "filename=$f"
    done < <(find /var/lib/rancher/k3s/server/tls/etcd -type f -maxdepth 1)

    # remove last comma to validate json format
    data_value_string=${data_value_string%?}
    data_value_string+="}}"
    # validate json payload
    #echo $data_value_string | jq empty
    data_value_string=$(echo $data_value_string | jq -c)

    curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/merge-patch+json" -X PATCH -d "${data_value_string}" ${APISERVER}/api/v1/namespaces/${NAMESPACE}/configmaps/k3s-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: testk3s
  name: testk3s
spec:
  replicas: 1
  selector:
    matchLabels:
      app: testk3s
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: testk3s
    spec:
      serviceAccountName: k3s-certs
      initContainers:
      - image: bash:5
        name: k3s-certs-gen
        command:
        - bash
        args:
        - /scripts/gen-certs.sh
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      - image: bash:5
        name: k3s-certs-cp
        command:
        - bash
        - "-c"
        args:
        - cp -r /secrets /var/lib/rancher/k3s/server/tls
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
        volumeMounts:
        - name: certs-rw
          mountPath: /var/lib/rancher/k3s/server/tls
        - name: certs
          mountPath: /secrets
      containers:
      - image: rancher/k3s:v1.30.13-k3s1
        name: k3s
        ports:
        - containerPort: 6443
        resources: {}
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
        args:
        - server
        - "--tls-san=testk3s.localtest.me"
        env:
        - name: K3S_KUBECONFIG_MODE
          value: "644"
        - name: K3S_KUBECONFIG_OUTPUT
          value: /etc/rancher/k3s/k3s.yaml
        volumeMounts:
        - name: certs-rw
          mountPath: /var/lib/rancher/k3s/server/tls
      volumes:
      - name: scripts
        configMap:
          name: k3s-scripts
      - name: certs-rw
        emptyDir: {}
      - name: certs
        configMap:
          name: k3s-certs
          items:
          - key: etcd-server-ca.pem
            path: etcd/server-ca.pem
          - key: etcd-server-ca.key
            path: etcd/server-ca.key
          - key: etcd-server-ca.crt
            path: etcd/server-ca.crt
          - key: etcd-peer-ca.pem
            path: etcd/peer-ca.pem
          - key: etcd-peer-ca.key
            path: etcd/peer-ca.key
          - key: etcd-peer-ca.crt
            path: etcd/peer-ca.crt

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  name: testk3s
spec:
  ingressClassName: nginx
  rules:
  - host: testk3s.localtest.me
    http:
      paths:
      - backend:
          service:
            name: testk3s
            port:
              number: 443
        path: /
        pathType: Prefix
        
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    component: testk3s
    tier: control-plane
  name: testk3s
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 6443
  selector:
    app: testk3s
